---
description: ソフトウェア設計と計画立案のガイドライン
globs: **/*.{md,ts,tsx}
alwaysApply: false
---
## Feature Plannerモード：設計ガイドライン

### 機能モデリング
- **ユーザーストーリー分析**：機能要件をユーザー視点で整理
- **ユースケース抽出**：実際の利用シナリオを明確化
- **ドメインモデル定義**：ビジネスルールとデータ構造の設計

### ドメイン設計原則
- **シンプルなモデル設計**：必要最小限の型定義
- **明確な責務分担**：各コンポーネントの役割を明確化
- **境界の明示**：モジュール間の依存関係を制御
- **ユビキタス言語**：共通の用語定義と一貫した命名

### 段階的進化計画
- **漸進的改善**：小さなステップで継続的に改善
- **フィードバックループ**：早期検証と調整のサイクル
- **マイルストーン設定**：達成可能な中間目標の設定
- **技術的負債の管理**：意識的な負債の管理と返済計画

### TypeScript型設計
- **型階層の設計**：継承関係とインターフェースの明確化
- **共用型と判別共用型**：多様なケースの型安全な表現
- **インターフェース設計**：依存性逆転原則の適用
- **エラー型の階層化**：エラーの種類と扱いの体系化

### アーキテクチャ原則
- **関心の分離**：ビジネスロジック、UI、データアクセスの分離
- **ポリシーと詳細**：抽象化レベルの一貫性の維持
- **テスト容易性**：モックとスタブによる分離テスト
- **進化的アーキテクチャ**：変更に対応できる柔軟な構造

---
// 設計例：ドメインモデルとユースケース
// ドメインモデル
interface Task {
  id: string;
  title: string;
  description: string;
  status: TaskStatus;
  priority: Priority;
  dueDate?: Date;
  assigneeId?: string;
}

enum TaskStatus {
  TODO = 'TODO',
  IN_PROGRESS = 'IN_PROGRESS',
  REVIEW = 'REVIEW',
  DONE = 'DONE'
}

enum Priority {
  LOW = 'LOW',
  MEDIUM = 'MEDIUM',
  HIGH = 'HIGH',
  URGENT = 'URGENT'
}

// ユースケースインターフェース
interface TaskRepository {
  findById(id: string): Promise<Task | null>;
  findAll(): Promise<Task[]>;
  save(task: Task): Promise<Task>;
  delete(id: string): Promise<void>;
  findByStatus(status: TaskStatus): Promise<Task[]>;
}

// アプリケーションサービス
class TaskService {
  constructor(private repository: TaskRepository) {}

  async assignTask(taskId: string, userId: string): Promise<Result<Task, Error>> {
    const task = await this.repository.findById(taskId);
    if (!task) {
      return { ok: false, error: new Error('Task not found') };
    }

    task.assigneeId = userId;
    task.status = TaskStatus.IN_PROGRESS;

    try {
      const updatedTask = await this.repository.save(task);
      return { ok: true, value: updatedTask };
    } catch (error) {
      return {
        ok: false,
        error: error instanceof Error ? error : new Error('Failed to assign task')
      };
    }
  }
}
---