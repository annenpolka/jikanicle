---
description: "テスト開発ガイドラインとベストプラクティス"
globs: ["**/*.test.ts", "**/*.spec.ts", "**/test/**/*.ts"]
---

# テスト開発ガイドライン

## 1. テスト原則
- Red-Green-Refactorサイクルの遵守
- 実装前にテストを書く
- 小さな検証サイクルでフィードバックを早く得る
- 回帰防止のためのテスト作成

## 2. テスト構造
- AAA（Arrange-Act-Assert）パターンを使用
  - Arrange: テストデータと前提条件の準備
  - Act: テスト対象の関数やメソッドの実行
  - Assert: 期待する結果の検証
- テストケースごとに明確な目的を持たせる
- 単一のアサーションを心がける（複合検証が必要な場合は例外）

```ts
// Good example
test('ユーザー名が空の場合はエラーを返す', () => {
  // Arrange
  const userData = { name: '', email: 'test@example.com' };

  // Act
  const result = validateUser(userData);

  // Assert
  expect(result.isErr()).toBe(true);
  expect(result._unsafeUnwrapErr().type).toBe('validation');
});
```

## 3. テスト種類
- ユニットテスト: 個々の関数やクラスの単独テスト
- 統合テスト: 複数のコンポーネントの連携テスト
- E2Eテスト: ユーザーの視点からのフロー全体テスト

## 4. モックとスタブ
- 外部依存は適切にモック化
- テスト容易性のためにインターフェースを設計
- アダプタパターンを活用した依存抽象化

```ts
// Good example - インメモリリポジトリでのテスト
test('ユーザーの保存と取得', async () => {
  // Arrange
  const repo = new InMemoryUserRepository();
  const userService = new UserService(repo);
  const userData = { name: 'テスト太郎', email: 'test@example.com' };

  // Act
  const savedResult = await userService.createUser(userData);
  const retrievedResult = await userService.getUserById(savedResult._unsafeUnwrap().id);

  // Assert
  expect(retrievedResult.isOk()).toBe(true);
  expect(retrievedResult._unsafeUnwrap().name).toBe('テスト太郎');
});
```

## 5. エッジケーステスト
- 境界値のテストを重視
- エラーケースの網羅的テスト
- パフォーマンス条件の検証

## 6. テストの保守性
- テストコードも製品コードと同様に品質を維持
- テストユーティリティとヘルパー関数の作成
- テストデータファクトリーの活用