---
description: "TypeScriptコーディング規約と実装パターン"
globs: ["**/*.ts", "**/*.tsx"]
---

# TypeScript開発ガイドライン

## 1. 基本方針
- 型とインターフェースを先に設計
- 仕様をコメントで明記
- 内部状態がない場合はクラスより関数を優先
- アダプタパターンで外部依存を抽象化

## 2. 型の使用
- `any`を避け、`unknown`から型を絞り込む
- 意味のある型エイリアス名をつける
- ユーティリティ型を活用

```ts
// Good
type UserId = string;
type UserData = {
  id: UserId;
  createdAt: Date;
};

// Bad
type Data = any;
```

## 3. エラー処理
- Result型を使用した明示的エラーハンドリング
- 具体的なエラーケースを列挙
- 型の網羅性チェックを活用

```ts
import { err, ok, Result } from "npm:neverthrow";

type ApiError =
  | { type: "network"; message: string }
  | { type: "notFound"; message: string }
  | { type: "unauthorized"; message: string };

async function fetchUser(id: string): Promise<Result<User, ApiError>> {
  try {
    const response = await fetch(`/api/users/${id}`);
    if (!response.ok) {
      switch (response.status) {
        case 404:
          return err({ type: "notFound", message: "User not found" });
        case 401:
          return err({ type: "unauthorized", message: "Unauthorized" });
        default:
          return err({
            type: "network",
            message: `HTTP error: ${response.status}`,
          });
      }
    }
    return ok(await response.json());
  } catch (error) {
    return err({
      type: "network",
      message: error instanceof Error ? error.message : "Unknown error",
    });
  }
}
```

## 4. 実装パターン選択基準
- 関数：単純操作、内部状態不要、依存少
- クラス：状態管理、リソース保持、ライフサイクル管理が必要
- アダプタ：外部依存の抽象化、テスト容易性確保

## 5. コード品質ルール
- 依存性注入でテスト容易性を確保
- インターフェースは最小限に設計
- 単一責任の原則に従ったモジュール化
- 循環参照を避ける